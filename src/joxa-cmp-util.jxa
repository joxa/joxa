(ns joxa-cmp-util
    (require (erlang :joxify)
             (re :joxify)
             (crypto :joxify)
             (io_lib :joxify)
             (lists :joxify)
             (binary :joxify)
             (cerl :joxify)))

;; Utilities Used by the Compiler
;; -----------------------------
(defn+ joxify-name (name)
  (let* (str-name (erlang/atom-to-list name))
    (erlang/list-to-atom (re/replace str-name "_" "-"
                                     [:global,{:return, :list}]))))

(defn+ get-joxa-info (type namespace fun-name)
  (try*
   (let* (info-fun (erlang/make-fun namespace :--joxa-info 2))
     (info-fun type fun-name))
   (catch (type body)
     (case {type body}
       ({:error :undef}
        :false)
       (_
        (erlang/raise type body (erlang/get-stacktrace)))))))

(defn+ get-joxa-info (type namespace)
  (try*
   (let* (info-fun (erlang/make-fun namespace :--joxa-info 1))
     (info-fun type))
   (catch (type body)
     (case {type body}
       ({:error :undef}
        :false)
       (_
        (erlang/raise type body (erlang/get-stacktrace)))))))


(defn gensym-body ()
  (let* (x (erlang/phash2 {(erlang/node) (erlang/now) (crypto/rand_bytes 16)}))
    (lists/map (fn (el)
                   (io-lib/format "~.16B" [el]))
               (erlang/binary_to_list
                (binary/encode_unsigned x)))))

(defn+ gensym ()
    (erlang/list_to_atom
     (lists/flatten (io-lib/format "#:G~s" [(gensym-body)]))))

(defn+ gensym (prefix)
    (erlang/list_to_atom
     (lists/flatten (io-lib/format "#:|~s~s|" [prefix (gensym-body)]))))

(defn+ add-to-annots (cerl-thing annots)
  (let* (old-annots (lists/filter (fn (el)
                                     (case el
                                       ({:rest _}
                                        :true)
                                       ({:not-rest _}
                                        :true)
                                       (_
                                        :false)))
                                 (cerl/get_ann cerl-thing)))
    (cerl/set_ann cerl-thing (lists/append old-annots annots))))
