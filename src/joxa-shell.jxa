;;; The Joxa Core Library
;;; =====================
;;; * author: Eric Merritt
;;; * copyright: Erlware, LLC 2011 - 2012
;;;
;;; Licensed under the Apache License, Version 2.0 you may not use
;;; this file except in compliance with the License.  You may obtain a
;;; copy of the License at http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; This module provides a shell or REPL for the joxa language
(ns joxa-shell
    (require io
             code
             lists
             ec_dictionary
             joxa-compiler
             joxa-cmp-ctx)
    (use (erlang :joxify
                 :only (==/2
                        or/2
                        get-stacktrace/0
                        atom-to-list/1
                        list-to-binary/1
                        make-fun/3
                        is-list/1
                        apply/3))
         (joxa-core :only (if/3
                           try/1))))

(defn prompt (ctx)
  (lists/concat [(atom-to-list (joxa-cmp-ctx/namespace-name-ctx ctx))
                 "> "]))
(defn read (ctx)
  (case (io/get_line (prompt ctx))
    (r (when (is-list r))
     (list-to-binary r))
    (else
     else)))

(defn eval (parse ctx)
  (let* (result (joxa-compiler/comp-interactive ctx :--joxa-shell parse [])
        comp-res
        (if (joxa-compiler/compilable? ctx)
            (if (== result :expr)
                (let* (call-fun (make-fun (joxa-cmp-ctx/namespace-name-ctx ctx) :--joxa-shell 0))
                  (call-fun))
              :ok)
          (if (or  (== result :expr)
                   (== result :defn))
              :error
            result)))
    (joxa-compiler/clear-errors ctx)
    comp-res))

(defn print (data ctx)
  (io/format "~p~n" [data]))

(defn loop (ctx acc)
  (try
   (case (read ctx)
     (:eof
      :eof)
     (<< (7 :integer) (_ :binary)>>
         (io/format "resetting input~n")
         (loop ctx <<>>))
     (r
      (case (eval <<(acc :binary) (r :binary)>> ctx)
        ({:error rest}
         (loop ctx rest))
        (result
         (print result ctx)
         (loop ctx <<>>)))))
   (catch
       (e
        (io/format "error: ~p : " [e])
        (io/format "~p~n" [(get-stacktrace)])
        (loop ctx <<>>)))))

(defn+ start ()
  (let* (ctx (joxa-compiler/start-interactive))
    (joxa-cmp-ctx/namespace-name-ctx ctx :joxa-is)
    (io/format "Joxa Version 0.1.2+build.4.3022910~n~n")
    (loop ctx <<>>)
    (joxa-compiler/stop-interactive ctx)))
