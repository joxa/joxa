;;; The Joxa Entry Point
;;; ====================
;;; * author: Eric Merritt
;;; * copyright: Erlware, LLC 2011 - 2012
;;;
;;; Licensed under the Apache License, Version 2.0 you may not use
;;; this file except in compliance with the License.  You may obtain a
;;; copy of the License at http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; This module provides an escript oriented interface to the joxa system.
(ns joxa
    (require joxa-compiler
             joxa-concurrent-compiler
             joxa-shell
             joxa-lists
             getopt
             (proplists :joxify)
             init
             code
             lists)
    (use (joxa-lists :only (dolist/2))))


(defn usage (os-list)
  (getopt/usage os-list "" "[option1 option2 ...] <joxa-file>"
                '()))

(defn+ option-spec-list ()
  (lists/append [{:pa  \p "pa" :string "Add a path to the head of the code path"}
                 {:pz \z "pz" :string "Add a path to the end of the code path"}
                 {:c \c "compile" :string "Compile the specified file"}]
                (joxa-compiler/option-spec-list)))

(defn setup-paths (options)
  (dolist (path (proplists/get_all_values :pa options))
    (code/add_patha path))
  (dolist (path (proplists/get_all_values :pz options))
    (code/add_pathz path)))

(defn call-builder (target options)
  (case target
    ([individual-target]
     (joxa-compiler/do-compile individual-target options))
    (targets
     (case (joxa-concurrent-compiler/do-compile targets options)
       (:ok
        :ok)
       ({:error _}
        (init/stop 127))))))

;; An entry point for the system
;; -----------------------------
;;
;; This is a very simple entry point for joxa. It provides an escript
;; that provides a means of dispatching to the right location based on
;; the users intent. Right now that intent is indicated by a -c in the
;; args
(defn+ main (args)
  (case (getopt/parse (option-spec-list) args)
    ({:ok {options rest-args}}
     (setup-paths options)
     (case (lists/append (proplists/get-all-values :c options) rest-args)
       ([]
        (joxa-shell/start))
       (targets
        (call-builder targets options))))
    (_
     (usage (option-spec-list))
     (init/stop 127))))

(defn+ main ()
  (main (init/get_plain_arguments)))
