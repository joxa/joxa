;;; The Joxa Compiler
;;; =================
;;; * author: Eric Merritt
;;; * copyright: Erlware, LLC 2011 - 2012
;;;
;;; Licensed under the Apache License, Version 2.0 you may not use
;;; this file except in compliance with the License.  You may obtain a
;;; copy of the License at http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; ### Path Hashing for Line and Type Information
;;;
;;; We have the problem that for macros and for ease of parsing we want
;;; to keep the AST as clean as possible. That is, we want it to be as
;;; close to a normal list as we can get away with. However, we want to
;;; be able to hang information on the graph that the AST
;;; represents. Things like line numbers, additional type information
;;; etc. However, in erlang we cant do that without polluting the graph
;;; itself and making it harder for user written macros to be
;;; implemented. So we need some way to identify specific points in the
;;; graph that is the AST that we can then use as a key on this
;;; additional information that we would like to show.
;;;
;;; In an AST nodes are identified by their location in the graph. That
;;; is, every node in the graph is identified by the path leading to
;;; that node.  Lets look at an example.
;;;
;;;     (hello world (I rock))
;;;
;;; In this case the 'I' node could be identified by the path [hello,
;;; world, <start of children>, I]. This should be a unique identifier
;;; for any point in the graph assuming that there is a single root
;;; term being parsed.
;;;
;;; If that is true we can replace the actual elements with their
;;; positions in the list. So the example above would become. [1, 3,
;;; 1]. Where the outer list is 1 (everything starts at one) the 3rd
;;; position is the list and the first element in that third
;;; position. Lets look at something a bit more something more realistic.
;;;
;;;     (defn+ hello-world [foo bar] (baz bang bong))
;;;
;;; In this example the bang node could be identified by everything
;;; leading up to it. So the path would be [defn+, hello-world,
;;; <children>, <start-of_children>, bang]. Lets translate this to our
;;; simple numerical paths. [1, 4, 2]. This should work to any level in
;;; the graph.
;;;
;;; We can make it even easier to manipulate buy having the firstest
;;; point in the graph be the closest point in the list so that we can
;;; push onto the list as we go forward. The actual path in the example
;;; above would be [2, 4, 1] and built up each time we see a list.
(ns joxa-cmp-path
    (require (ec_dictionary :joxify))
    (use (erlang :only (+/2))))

(defn+ new-path ()
  {1, []})

(defn+ incr-path (pos path)
  (case path
    ({:suspended _}
     path)
    ({oldpos oldpath}
     {(+ pos oldpos) oldpath})))

(defn+ incr-path (path)
  (incr-path 1 path))

(defn+ traverse-path (path)
  (case path
    ({:suspended _}
     path)
    ({old-position old-path}
     {1, (old-position . old-path)})))

(defn+ path? (path)
  (case path
    ({:suspended {_ old-path}} old-path)
    ({_ old-path}
     old-path)))

(defn+ traverse-and-get-path (path)
  (path? (traverse-path path)))

(defn+ traverse-incr-path (path)
  (traverse-path (incr-path path)))

(defn+ traverse-incr-path (amount path)
  (traverse-path (incr-path amount path)))

(defn+ suspend (path)
  "Suspends all pathing additions. This is mostly useful for
macros. After a macro call is made paths no longer sensical. This
suspends all pathing at a specific point so all later path
manipulation calls have no effect. This means that the line number of
errors in a generated function will always be the line number of the macro."
  (case path
    ({:suspended _}
     path)
    (_
       {:suspended path})))

;; ### Annotation storage and retrieval
;;
;; With path support in place its time take care of the annotations
;; themselves. We want the api to handle formating and internal
;; storage forms. As long as we give it a good path we want to get
;; back what we ask for.
(defn+ new-annots ()
  (ec-dictionary/new :ec_dict))

(defn+ make-annots (path filename type idx annotations)
  (case idx
    ({line _}
     (ec-dictionary/add path {type idx [line {:file filename}]}
                        annotations))))

;; sometimes an invalid path is passed in. This is unfortunate but
;; things like macros mangle the path in currently unforseable
;; ways. With this in mind we keep backing up the path until such time
;; that we get a valid annotation. This lets us give at least the line
;; number and annotations of the top most related form.
(defn get-valid-annots (path annotations)
  (case path
    ([]
     :not-found)
    ((_ . rest)
     (try*
      (ec-dictionary/get path annotations)
      (catch (type body)
        (case {type body}
          ({:throw :not_found}
           (get-valid-annots rest annotations))))))))

(defn+ get-type-annots (path annotations)
  (case (get-valid-annots path annotations)
    (:not-found
     :unknown)
    ({type _ _}
     type)))

(defn+ get-idx-annots (path annotations)
  (case (get-valid-annots path annotations)
    (:not-found
     {0 0})
    ({_ idx _}
     idx)))

(defn+ get-line-annots (path annotations)
  (case (get-valid-annots path annotations)
    (:not-found
     [0 {:file ""}])
    ({_ _ line}
     line)))

(defn+ get-line-annots (path extra annotations)
  (let* (annots (get-line-annots path annotations))
    (extra . annots)))
