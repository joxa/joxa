(module joxa.core
        (require erlang lists))

(defn+ +(&rest args)
  (case args
    ([x y]
     (erlang/+ x y))
    ((a . b)
     (lists/sum args))
    (arg
     arg)))


(defn - (num-list acc)
  (case num-list
    ([]
     acc)
    ((a . rest)
     (- rest  (erlang/- acc a)))))

(defn+ -(&rest args)
  (case args
    ([a]
     (erlang/- 0 a))
    ((a . rest)
     (- rest a))))


(defmacro+ if (expression true-body false-body)
  `(case ~expression
     (:true
      ~true-body)
     (:false
      ~false-body)))

(defmacro+ when (expression true-body)
  `(case ~expression
     (:true
      ~true-body)
     (:false
      :ok)))

(defmacro+ unless (expression false-body)
  `(case ~expression
     (:true
      :ok)
     (:false
      ~false-body)))
