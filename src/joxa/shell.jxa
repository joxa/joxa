(module joxa.shell
        (require io code lists ec_dictionary
                 joxa.compiler)
        (use (erlang :only (atom_to_list/1 list_to_binary/1 apply/3))))

(defn prompt (ctx)
  (lists/concat [(atom_to_list (joxa.compiler/module-name-ctx ctx))
                 "> "]))
(defn read (ctx)
  (erlang/list_to_binary (io/get_line (prompt ctx))))

(defn eval (parse ctx)
  (let (result (joxa.compiler/comp-interactive ctx :--joxa-shell parse [])
        comp-res
        (case (erlang/and  (joxa.compiler/compilable? ctx)
                           (erlang/== result :expr))
          (:true
           (let (call-fun (erlang/make_fun (joxa.compiler/module-name-ctx ctx) :--joxa-shell 0))
             (call-fun)))
          (:false
           :ok)))
    (joxa.compiler/clear-errors ctx)
    comp-res))

(defn print (data ctx)
  (io/format "~p~n" [data]))

(defn loop (ctx)
  (do
    (let (r (read ctx)
          e (case r
              (""
               {:ok ctx})
              (_
               (eval r ctx))))
      (print e ctx)
      (loop ctx))))

(defn+ start ()
  (let (ctx (joxa.compiler/start-interactive))
    (joxa.compiler/module-name-ctx ctx :joxa-shell)
    (io/format "Joxa 0.0.1~n~n")
    (loop ctx)
    (joxa.compiler/stop-interactive ctx)))
